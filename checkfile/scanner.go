package checkfile

import (
	"Anthophila/logging"
	v "Anthophila/struct_modul"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"
)

// /////////////////////////////////////////////////////////////////////////////
// –°—Ç—Ä—É–∫—Ç—É—Ä–∞: Scanner
// –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–∏—Ö –∞–±–æ –Ω–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤,
// –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —ó—Ö —Ö–µ—à—ñ–≤ —ñ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è.
// /////////////////////////////////////////////////////////////////////////////
type Scanner struct {
	Directories         []string               // –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
	SupportedExtensions []string               // –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
	VerifyBuffer        *VerifyBuffer          // –ë—É—Ñ–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —ñ —Ö–µ—à—ñ–≤
	PendingBuffer       *PendingFilesBuffer    // –ë—É—Ñ–µ—Ä —Ñ–∞–π–ª—ñ–≤, —â–æ –æ—á—ñ–∫—É—é—Ç—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
	InputChan           chan<- v.Verify        // –ö–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ —Ñ–∞–π–ª—ñ–≤ –Ω–∞ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
	Logger              *logging.LoggerService // –°–µ—Ä–≤—ñ—Å –ª–æ–≥—É–≤–∞–Ω–Ω—è
	Mutex               *sync.Mutex            // –ú'—é—Ç–µ–∫—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–æ—Å—Ç—É–ø—É –¥–æ –±—É—Ñ–µ—Ä—ñ–≤
	ctx                 <-chan struct{}        // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –≥–æ—Ä—É—Ç–∏–Ω–∏
	wg                  *sync.WaitGroup        // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–æ—Ä—É—Ç–∏–Ω
}

// /////////////////////////////////////////////////////////////////////////////
// –§—É–Ω–∫—Ü—ñ—è: NewScanner
// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ Scanner
// /////////////////////////////////////////////////////////////////////////////
func NewScanner(
	directories []string,
	supportedExtensions []string,
	verifyBuffer *VerifyBuffer,
	pendingBuffer *PendingFilesBuffer,
	inputChan chan<- v.Verify,
	logger *logging.LoggerService,
	mutex *sync.Mutex,
	ctx <-chan struct{},
	wg *sync.WaitGroup,
) *Scanner {
	return &Scanner{
		Directories:         directories,
		SupportedExtensions: supportedExtensions,
		VerifyBuffer:        verifyBuffer,
		PendingBuffer:       pendingBuffer,
		InputChan:           inputChan,
		Logger:              logger,
		Mutex:               mutex,
		ctx:                 ctx,
		wg:                  wg,
	}
}

// /////////////////////////////////////////////////////////////////////////////
// –ú–µ—Ç–æ–¥: Start
// –ó–∞–ø—É—Å–∫–∞—î –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —É –æ–∫—Ä–µ–º—ñ–π –≥–æ—Ä—É—Ç–∏–Ω—ñ.
// –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ñ –∞–±–æ –∑–º—ñ–Ω–µ–Ω—ñ —Ñ–∞–π–ª–∏, –Ω–∞–¥—Å–∏–ª–∞—î —ó—Ö –Ω–∞ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è,
// –∑–±–µ—Ä—ñ–≥–∞—î –±—É—Ñ–µ—Ä–∏ —É JSON-—Ñ–∞–π–ª–∏.
// /////////////////////////////////////////////////////////////////////////////
func (s *Scanner) Start() {
	s.wg.Add(1)
	go func() {
		defer s.wg.Done()
		for {
			select {
			case <-s.ctx:
				s.Logger.LogInfo("Scanning stopped", "End")
				return
			default:
				s.Logger.LogInfo("üîÅ Directory scanning", "Start")
				for _, dir := range s.Directories {
					err := filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
						if err != nil || info.IsDir() || !isSupportedFileType(path, s.SupportedExtensions) {
							return nil
						}
						changed, verify, err := s.VerifyBuffer.SaveToBuffer(path)
						if err != nil {
							s.Logger.LogError("Buffer error", err.Error())
							return nil
						}
						if changed {
							s.Logger.LogInfo("Modified file found", verify.Path)
							_ = os.Remove(verify.Path + ".enc")
							s.InputChan <- verify
						}
						return nil
					})
					if err != nil {
						s.Logger.LogError("Directory traversal error", err.Error())
					}
				}

				s.Mutex.Lock()
				_ = s.VerifyBuffer.SaveToFile("verified_files.json")
				_ = s.PendingBuffer.SaveToFile("pending_files.json")
				s.Mutex.Unlock()

				time.Sleep(10 * time.Second)
			}
		}
	}()
}

// /////////////////////////////////////////////////////////////////////////////
// –§—É–Ω–∫—Ü—ñ—è: isSupportedFileType
// –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Ñ–∞–π–ª –º–∞—î –æ–¥–Ω–µ –∑ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ä–æ–∑—à–∏—Ä–µ–Ω—å
// /////////////////////////////////////////////////////////////////////////////
func isSupportedFileType(file string, supportedExtensions []string) bool {
	for _, ext := range supportedExtensions {
		if strings.HasSuffix(strings.ToLower(file), strings.ToLower(ext)) {
			return true
		}
	}
	return false
}
