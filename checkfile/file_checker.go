package checkfile

import (
	"Anthophila/information"
	"Anthophila/logging"
	"context"
	"sync"
)

// FileHasher - —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –∑–∞–ø–∏—Å—É —Ö–µ—à—ñ–≤ —Ñ–∞–π–ª—ñ–≤
// (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è —Ñ–∞–π–ª).
type FileHasher interface {
	CheckAndWriteHash(path, hashFile string) (bool, error)
}

// FileChecker - –≥–æ–ª–æ–≤–Ω–∏–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ–π–Ω–∏–π –∫–ª–∞—Å –¥–ª—è:
// - —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
// - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–º—ñ–Ω
// - —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
// - –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
// - –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π
type FileChecker struct {
	File_server         string                 // –ê–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
	Logger              *logging.LoggerService // –°–µ—Ä–≤—ñ—Å –ª–æ–≥—É–≤–∞–Ω–Ω—è
	Key                 string                 // –ö–ª—é—á AES-256 –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
	Directories         []string               // –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
	SupportedExtensions []string               // –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ç–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤
	Hour                int8                   // –ß–∞—Å –∑–∞–ø—É—Å–∫—É (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ–¥—ñ)
	Minute              int8                   // –•–≤–∏–ª–∏–Ω–∞ –∑–∞–ø—É—Å–∫—É
	Info                *information.Info      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
	Hasher              FileHasher             // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ö–µ—à—ñ–≤

	ctx       context.Context    // –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
	cancel    context.CancelFunc // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	wg        sync.WaitGroup     // –ì—Ä—É–ø–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø—É—â–µ–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
	pendingMu sync.Mutex         // –ú'—é—Ç–µ–∫—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –±—É—Ñ–µ—Ä—ñ–≤
}

// NewFileChecker - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä FileChecker
func NewFileChecker(file_server string, logger *logging.LoggerService, key string, directories []string, se []string, h int8, m int8, info *information.Info) *FileChecker {
	ctx, cancel := context.WithCancel(context.Background())
	return &FileChecker{
		File_server:         file_server,
		Logger:              logger,
		Key:                 key,
		Directories:         directories,
		SupportedExtensions: se,
		Hour:                h,
		Minute:              m,
		Info:                info,
		ctx:                 ctx,
		cancel:              cancel,
	}
}

func (fc *FileChecker) Start() {
	fc.Logger.LogInfo("üöÄ –ó–∞–ø—É—Å–∫ FileChecker", "")

	inputEnc, outputEnc, vb, pb, encryptor, sender, err := fc.initComponents()
	if err != nil {
		fc.Logger.LogError("‚ùå Encryptor init error", err.Error())
		return
	}

	fc.startEncryptor(encryptor)
	fc.startSender(sender)
	fc.startResultHandler(sender, pb)
	fc.startEncryptedHandler(outputEnc, pb, sender)
	fc.startScanner(vb, pb, inputEnc)
}

func (fc *FileChecker) Stop() {
	fc.cancel()
	fc.wg.Wait()
	fc.Logger.LogInfo("üõë FileChecker –∑—É–ø–∏–Ω–µ–Ω–æ", "")
}

// --- –ü–Ü–î–ú–ï–¢–û–î–ò ---

func (fc *FileChecker) initComponents() (
	chan Verify,
	chan EncryptedFile,
	*VerifyBuffer,
	*PendingFilesBuffer,
	*FILEEncryptor,
	*FileSender,
	error,
) {
	inputEnc := make(chan Verify, 100)
	outputEnc := make(chan EncryptedFile, 100)

	vb := &VerifyBuffer{}
	_ = vb.LoadFromFile("verified_files.json")

	pb := &PendingFilesBuffer{}
	_ = pb.LoadFromFile("pending_files.json")

	encryptor, err := NewFILEEncryptor([]byte(fc.Key), inputEnc, outputEnc)
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	sender := NewFileSender("http://" + fc.File_server + "/api/files/upload")

	return inputEnc, outputEnc, vb, pb, encryptor, sender, nil
}

func (fc *FileChecker) startEncryptor(encryptor *FILEEncryptor) {
	fc.Logger.LogInfo("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Encryptor", "")
	encryptor.Start(&fc.wg)
}

func (fc *FileChecker) startSender(sender *FileSender) {
	fc.Logger.LogInfo("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Sender", "")
	sender.Start()
}

func (fc *FileChecker) startResultHandler(sender *FileSender, pb *PendingFilesBuffer) {
	handler := NewResultListener(sender.ResultChan, pb, fc.Logger, &fc.pendingMu, fc.ctx.Done(), &fc.wg)
	handler.Start()
}

func (fc *FileChecker) startEncryptedHandler(output <-chan EncryptedFile, pb *PendingFilesBuffer, sender *FileSender) {
	h := NewEncryptedFileHandler(output, pb, fc.Logger, sender.FileChan, &fc.pendingMu, fc.ctx.Done(), &fc.wg)
	h.Start()
}

func (fc *FileChecker) startScanner(vb *VerifyBuffer, pb *PendingFilesBuffer, input chan<- Verify) {
	scanner := NewScanner(fc.Directories, fc.SupportedExtensions, vb, pb, input, fc.Logger, &fc.pendingMu, fc.ctx.Done(), &fc.wg)
	scanner.Start()
}
