package checkfile

import (
	"Anthophila/information"
	"Anthophila/logging"
	sm "Anthophila/struct_modul"

	"context"
	"sync"
)

// FileHasher - —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –∑–∞–ø–∏—Å—É —Ö–µ—à—ñ–≤ —Ñ–∞–π–ª—ñ–≤.
// –ú–µ—Ç–æ–¥ CheckAndWriteHash(path, hashFile) –ø–æ–≤–µ—Ä—Ç–∞—î true, —è–∫—â–æ —Ñ–∞–π–ª –∑–º—ñ–Ω–µ–Ω–æ (–Ω–æ–≤–∏–π —Ö–µ—à), —ñ–Ω–∞–∫—à–µ false.
type FileHasher interface {
	CheckAndWriteHash(path, hashFile string) (bool, error)
}

// FileChecker - –≥–æ–ª–æ–≤–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å–æ–º –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤.
// –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
// - –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–æ–≤–∏—Ö/–∑–º—ñ–Ω–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.
// - –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.
// - –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
// - –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π.
// - –û–±—Ä–æ–±–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.
type FileChecker struct {
	File_server         string                 // –ê–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞, –∫—É–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É—Ç—å—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ —Ñ–∞–π–ª–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 192.168.0.10:8020)
	Logger              *logging.LoggerService // –°–µ—Ä–≤—ñ—Å –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π (—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏—Ö, –ø–æ–º–∏–ª–æ–∫ —Ç–æ—â–æ)
	Key                 string                 // –ö–ª—é—á —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è (–ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ 32-–±–∞–π—Ç–Ω–∏–π –¥–ª—è AES-256)
	Directories         []string               // –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–∞–Ω—É–≤–∞—Ç–∏
	SupportedExtensions []string               // –î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, .doc, .pdf)
	Hour                int8                   // –ß–∞—Å –∑–∞–ø—É—Å–∫—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞—Ä–∞–∑—ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è)
	Minute              int8                   // –•–≤–∏–ª–∏–Ω–∞ –∑–∞–ø—É—Å–∫—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞—Ä–∞–∑—ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è)
	Info                *information.Info      // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞ (hostname, ip, mac —Ç–æ—â–æ)
	Hasher              FileHasher             // –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ö–µ—à—É —Ñ–∞–π–ª—ñ–≤ (–¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω)

	ctx       context.Context    // –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ (–¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥–æ—Ä—É—Ç–∏–Ω–∞–º–∏)
	cancel    context.CancelFunc // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–∑—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤)
	wg        sync.WaitGroup     // –ì—Ä—É–ø–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	pendingMu sync.Mutex         // –ú'—é—Ç–µ–∫—Å –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –±—É—Ñ–µ—Ä—ñ–≤ (Pending, Verify)
}

// NewFileChecker - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä FileChecker. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –≤—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ.
func NewFileChecker(file_server string, logger *logging.LoggerService, key string, directories []string, se []string, h int8, m int8, info *information.Info) *FileChecker {
	ctx, cancel := context.WithCancel(context.Background())
	return &FileChecker{
		File_server:         file_server,
		Logger:              logger,
		Key:                 key,
		Directories:         directories,
		SupportedExtensions: se,
		Hour:                h,
		Minute:              m,
		Info:                info,
		ctx:                 ctx,
		cancel:              cancel,
	}
}

// Start - –æ—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö –ø—ñ–¥–ø—Ä–æ—Ü–µ—Å—ñ–≤: —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è, —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è, –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–∞ –æ–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.
func (fc *FileChecker) Start() {
	fc.Logger.LogInfo("üöÄ –ó–∞–ø—É—Å–∫ FileChecker", "")

	input_to_enc_file, output_enc_file, vb, pb, encryptor, sender, err := fc.initComponents()
	if err != nil {
		fc.Logger.LogError("‚ùå Encryptor init error", err.Error())
		return
	}

	fc.startEncryptor(encryptor)
	fc.startSender(sender)
	fc.startResultHandler(sender, pb)
	fc.startEncryptedHandler(output_enc_file, pb, sender)
	fc.startPendingFileFlusher(pb, sender.Iutput_to_send_enc_file)
	fc.startScanner(vb, pb, input_to_enc_file)
}

// Stop - –∑–∞–≤–µ—Ä—à—É—î –≤—Å—ñ –ø—Ä–æ—Ü–µ—Å–∏, –≤–∏–∫–ª–∏–∫–∞—é—á–∏ cancel() —ñ –æ—á—ñ–∫—É—é—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–æ—Ä—É—Ç–∏–Ω —á–µ—Ä–µ–∑ WaitGroup.
func (fc *FileChecker) Stop() {
	fc.cancel()
	fc.wg.Wait()
	fc.Logger.LogInfo("üõë FileChecker –∑—É–ø–∏–Ω–µ–Ω–æ", "")
}

// initComponents - —Å—Ç–≤–æ—Ä—é—î –≤—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏: –±—É—Ñ–µ—Ä–∏, –∫–∞–Ω–∞–ª–∏, –µ–Ω–∫—Ä–∏–ø—Ç–æ—Ä, –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫.
func (fc *FileChecker) initComponents() (
	chan sm.Verify,
	chan sm.EncryptedFile,
	*VerifyBuffer,
	*PendingFilesBuffer,
	*FILEEncryptor,
	*FileSender,
	error,
) {
	input_to_enc_file := make(chan sm.Verify, 100)
	output_enc_file := make(chan sm.EncryptedFile, 100)

	vb := &VerifyBuffer{}
	_ = vb.LoadFromFile("verified_files.json")

	pb := &PendingFilesBuffer{}
	_ = pb.LoadFromFile("pending_files.json")

	encryptor, err := NewFILEEncryptor([]byte(fc.Key), input_to_enc_file, output_enc_file)
	if err != nil {
		return nil, nil, nil, nil, nil, nil, err
	}

	sender := NewFileSender("http://" + fc.File_server + "/api/files/upload")

	return input_to_enc_file, output_enc_file, vb, pb, encryptor, sender, nil
}

// startEncryptor - –∑–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è (–µ–Ω–∫—Ä–∏–ø—Ç–æ—Ä).
func (fc *FileChecker) startEncryptor(encryptor *FILEEncryptor) {
	fc.Logger.LogInfo("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Encryptor", "")
	encryptor.Start(&fc.wg)
}

// startSender - –∑–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.
func (fc *FileChecker) startSender(sender *FileSender) {
	fc.Logger.LogInfo("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ Sender", "")
	sender.Start()
}

// startResultHandler - –∑–∞–ø—É—Å–∫–∞—î —Å–ª—É—Ö–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (–≤–∏–¥–∞–ª—è—î —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ —Ñ–∞–π–ª–∏ –∑ –±—É—Ñ–µ—Ä–∞).
func (fc *FileChecker) startResultHandler(sender *FileSender, pb *PendingFilesBuffer) {
	handler := NewResultListener(sender.ResultChan, pb, fc.Logger, &fc.pendingMu, fc.ctx.Done(), &fc.wg)
	handler.Start()
}

// startEncryptedHandler - —Å–ª—É—Ö–∞—î –∫–∞–Ω–∞–ª –≤–∏—Ö—ñ–¥–Ω–∏—Ö –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —ñ –ø–µ—Ä–µ–¥–∞—î —ó—Ö —É –±—É—Ñ–µ—Ä —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É.
func (fc *FileChecker) startEncryptedHandler(input_enc_file <-chan sm.EncryptedFile, pb *PendingFilesBuffer, sender *FileSender) {
	h := NewEncryptedFileHandler(input_enc_file, pb, fc.Logger, sender.Iutput_to_send_enc_file, &fc.pendingMu, fc.ctx.Done(), &fc.wg)
	h.Start()
}

// startScanner - –∑–∞–ø—É—Å–∫–∞—î —Å–∫–∞–Ω–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π, —è–∫–∏–π –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–æ–≤—ñ –∞–±–æ –∑–º—ñ–Ω–µ–Ω—ñ —Ñ–∞–π–ª–∏.
func (fc *FileChecker) startScanner(vb *VerifyBuffer, pb *PendingFilesBuffer, input_to_enc_file chan<- sm.Verify) {
	scanner := NewScanner(fc.Directories, fc.SupportedExtensions, vb, pb, input_to_enc_file, fc.Logger, &fc.pendingMu, fc.ctx.Done(), &fc.wg)
	scanner.Start()
}

// startPendingFileFlusher - –∑–∞–ø—É—Å–∫–∞—î –º–µ—Ö–∞–Ω—ñ–∑–º –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —ñ–∑ –±—É—Ñ–µ—Ä–∞.
func (fc *FileChecker) startPendingFileFlusher(pb *PendingFilesBuffer, fileChan chan<- string) {
	flusher := NewPendingFlusher("http://"+fc.File_server+"/api/files", pb, fileChan, fc.Logger, &fc.pendingMu, fc.ctx.Done(), &fc.wg)
	flusher.Start()
}
