///////////////////////////////////////////////////////////////////////////////
// Package: checkfile
// –ö–ª–∞—Å: PendingFilesBuffer
// –û–ø–∏—Å: –ú–µ–Ω–µ–¥–∂–µ—Ä –±—É—Ñ–µ—Ä–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤, —è–∫—ñ —â–µ –Ω–µ –±—É–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ.
//       –ó–∞–±–µ–∑–ø–µ—á—É—î –±–µ–∑–ø–µ—á–Ω—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É —Ä–æ–±–æ—Ç—É —á–µ—Ä–µ–∑ RWMutex.
//       –ü—ñ–¥—Ç—Ä–∏–º—É—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ —Ñ–∞–π–ª, –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥.
///////////////////////////////////////////////////////////////////////////////

package checkfile

import (
	sm "Anthophila/struct_modul"
	"encoding/json"
	"os"
	"sync"
)

// /////////////////////////////////////////////////////////////////////////////
// –°—Ç—Ä—É–∫—Ç—É—Ä–∞: PendingFilesBuffer
//
// –ü–æ–ª—è:
//   - mu: RWMutex –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —á–∏—Ç–∞–Ω–Ω—è/–∑–∞–ø–∏—Å—É –¥–æ –±—É—Ñ–µ—Ä–∞.
//   - buffer: –º–∞–ø–∞, –¥–µ –∫–ª—é—á ‚Äî —à–ª—è—Ö –¥–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É (EncryptedPath),
//     –∞ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ EncryptedFile.
//
// –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:
// –¶–µ–π –±—É—Ñ–µ—Ä –∑–±–µ—Ä—ñ–≥–∞—î —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤, —è–∫—ñ –±—É–ª–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ, –∞–ª–µ —â–µ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ.
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –≥–æ—Ä—É—Ç–∏–Ω–∞—Ö –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ä–æ–±–æ—Ç–∏.
// /////////////////////////////////////////////////////////////////////////////
type PendingFilesBuffer struct {
	mu     sync.RWMutex                // –ú'—é—Ç–µ–∫—Å –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
	buffer map[string]sm.EncryptedFile // –ú–∞–ø–∞ —Ñ–∞–π–ª—ñ–≤, –∫–ª—é—á ‚Äî EncryptedPath
}

// /////////////////////////////////////////////////////////////////////////////
// –ú–µ—Ç–æ–¥: LoadFromFile
// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –±—É—Ñ–µ—Ä –∑ JSON-—Ñ–∞–π–ª—É. –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î ‚Äî —Å—Ç–≤–æ—Ä—é—î –ø–æ—Ä–æ–∂–Ω—ñ–π –±—É—Ñ–µ—Ä.
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
// - path: —à–ª—è—Ö –¥–æ JSON-—Ñ–∞–π–ª—É.
//
// –ü–æ–≤–µ—Ä—Ç–∞—î:
// - –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –≤–æ–Ω–∞ –≤–∏–Ω–∏–∫–ª–∞ –ø—ñ–¥ —á–∞—Å —á–∏—Ç–∞–Ω–Ω—è –∞–±–æ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è.
// /////////////////////////////////////////////////////////////////////////////
func (p *PendingFilesBuffer) LoadFromFile(path string) error {
	p.mu.Lock()
	defer p.mu.Unlock()

	file, err := os.Open(path)
	if err != nil {
		if os.IsNotExist(err) {
			p.buffer = make(map[string]sm.EncryptedFile) // –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π –±—É—Ñ–µ—Ä
			return nil
		}
		return err
	}
	defer file.Close()

	var list []sm.EncryptedFile
	if err := json.NewDecoder(file).Decode(&list); err != nil {
		return err
	}

	p.buffer = make(map[string]sm.EncryptedFile)
	for _, v := range list {
		p.buffer[v.EncryptedPath] = v
	}
	return nil
}

// /////////////////////////////////////////////////////////////////////////////
// –ú–µ—Ç–æ–¥: AddToBuffer
// –î–æ–¥–∞—î –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π —Ñ–∞–π–ª –¥–æ –±—É—Ñ–µ—Ä–∞, —è–∫—â–æ —Ñ–∞–π–ª –Ω–æ–≤–∏–π –∞–±–æ —Ö–µ—à –∑–º—ñ–Ω–∏–≤—Å—è.
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
// - file: –æ–±'—î–∫—Ç EncryptedFile, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏.
// /////////////////////////////////////////////////////////////////////////////
func (p *PendingFilesBuffer) AddToBuffer(file sm.EncryptedFile) {
	p.mu.Lock()
	defer p.mu.Unlock()

	existing, exists := p.buffer[file.EncryptedPath]
	if exists && existing.OriginalHash == file.OriginalHash {
		// üü° –§–∞–π–ª —É–∂–µ –≤ –±—É—Ñ–µ—Ä—ñ —ñ –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
		return
	}
	p.buffer[file.EncryptedPath] = file
}

// /////////////////////////////////////////////////////////////////////////////
// –ú–µ—Ç–æ–¥: SaveToFile
// –ó–±–µ—Ä—ñ–≥–∞—î –≤–µ—Å—å –±—É—Ñ–µ—Ä —É JSON-—Ñ–∞–π–ª (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î –π–æ–≥–æ –ø–æ–≤–Ω—ñ—Å—Ç—é).
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
// - path: —à–ª—è—Ö –¥–æ JSON-—Ñ–∞–π–ª—É.
//
// –ü–æ–≤–µ—Ä—Ç–∞—î:
// - –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –≤–æ–Ω–∞ –≤–∏–Ω–∏–∫–ª–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Å—É.
// /////////////////////////////////////////////////////////////////////////////
func (p *PendingFilesBuffer) SaveToFile(path string) error {
	p.mu.RLock() // –ß–∏—Ç–∞–Ω–Ω—è ‚Äî –¥–æ—Å—Ç–∞—Ç–Ω—å–æ RLock
	defer p.mu.RUnlock()

	var list []sm.EncryptedFile
	for _, v := range p.buffer {
		list = append(list, v)
	}

	file, err := os.Create(path)
	if err != nil {
		return err
	}
	defer file.Close()

	return json.NewEncoder(file).Encode(list) // –ó–∞–ø–∏—Å—É—î–º–æ slice —É —Ñ–∞–π–ª
}

// /////////////////////////////////////////////////////////////////////////////
// –ú–µ—Ç–æ–¥: RemoveFromBuffer
// –í–∏–¥–∞–ª—è—î —Ñ–∞–π–ª –∑ –±—É—Ñ–µ—Ä–∞ –∑–∞ —à–ª—è—Ö–æ–º.
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
// - filePath: —à–ª—è—Ö –¥–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É (EncryptedPath).
// /////////////////////////////////////////////////////////////////////////////
func (p *PendingFilesBuffer) RemoveFromBuffer(filePath string) {
	p.mu.Lock()
	defer p.mu.Unlock()
	delete(p.buffer, filePath)
}

// /////////////////////////////////////////////////////////////////////////////
// –ú–µ—Ç–æ–¥: GetAllFiles
// –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ–ø—ñ—é –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ slice.
//
// –ü–æ–≤–µ—Ä—Ç–∞—î:
// - []EncryptedFile: —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –∑ –±—É—Ñ–µ—Ä–∞.
// /////////////////////////////////////////////////////////////////////////////
func (p *PendingFilesBuffer) GetAllFiles() []sm.EncryptedFile {
	p.mu.RLock()
	defer p.mu.RUnlock()

	var files []sm.EncryptedFile
	for _, file := range p.buffer {
		files = append(files, file)
	}
	return files
}
